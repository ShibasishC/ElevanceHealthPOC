```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

@pytest.mark.parametrize("input,expected", [
    (1, 1),  # factorial of 1 is 1
    (5, 120),  # factorial of 5 is 120
    (10, 3628800),  # factorial of 10 is 3628800
    (0, 1),  # factorial of 0 is 1
])
def test_factorial_positive(input, expected):
    assert factorial(input) == expected

@pytest.mark.parametrize("input", [
    -1,  # factorial of negative number is undefined
    -10,  # factorial of negative number is undefined
])
def test_factorial_negative(input):
    with pytest.raises(RecursionError):
        factorial(input)

@pytest.mark.parametrize("input", [
    1.5,  # factorial of non-integer number is undefined
    0.0,  # factorial of 0 is 1
])
def test_factorial_non_integer(input):
    with pytest.raises(RecursionError):
        factorial(input)

@pytest.mark.parametrize("input", [
    "string",  # factorial of non-numeric type is undefined
    [],  # factorial of non-numeric type is undefined
])
def test_factorial_non_numeric(input):
    with pytest.raises(TypeError):
        factorial(input)
```