```python
# imports
import pytest  # used for our unit tests

# function to test
def maximum(a, b):
    if a >= b:
        return a
    else:
        return b

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator
@pytest.mark.parametrize("a, b, expected", [
    (2, 4, 4),  # testing with positive numbers
    (10, 5, 10),  # testing with positive numbers
    (-2, -4, -2),  # testing with negative numbers
    (-10, -5, -5),  # testing with negative numbers
    (0, 4, 4),  # testing with zero
    (-2, 0, 0),  # testing with zero
    (3, 3, 3),  # testing with equal numbers
    (-5, -5, -5),  # testing with equal numbers
    (2.5, 4.5, 4.5),  # testing with floating point numbers
    (-2.5, -1.5, -1.5),  # testing with floating point numbers
    (1000000, 500000, 1000000),  # testing with large numbers
    (-1000000, -500000, -500000)  # testing with large numbers
])
def test_maximum(a, b, expected):
    assert maximum(a, b) == expected
```
In the above code, `@pytest.mark.parametrize` is a decorator provided by pytest that allows you to pass multiple sets of arguments to a test function. It is followed by a list of tuples, where each tuple represents a test case. The first two elements of each tuple are the inputs to the `maximum` function, and the third element is the expected output. The `test_maximum` function then asserts that the output of the `maximum` function matches the expected output for each set of inputs.