```python
# imports
import pytest  # used for our unit tests

# function to test
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
        return self.firstname + " " + self.lastname

class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year

# unit tests
@pytest.mark.parametrize("fname, lname, expected", [
    ("John", "Doe", "John Doe"),
    ("Jane", "Smith", "Jane Smith"),
    ("", "", " "),
])
def test_person_printname(fname, lname, expected):
    # Test the printname method of the Person class
    person = Person(fname, lname)
    assert person.printname() == expected

@pytest.mark.parametrize("fname, lname, year, expected", [
    ("Mike", "Olsen", 2019, 2019),
    ("Anna", "Johnson", 2022, 2022),
    ("", "", 0, 0),
])
def test_student_graduationyear(fname, lname, year, expected):
    # Test the graduationyear attribute of the Student class
    student = Student(fname, lname, year)
    assert student.graduationyear == expected

@pytest.mark.parametrize("fname, lname, year, expected", [
    ("Mike", "Olsen", 2019, "Mike Olsen"),
    ("Anna", "Johnson", 2022, "Anna Johnson"),
    ("", "", 0, " "),
])
def test_student_printname(fname, lname, year, expected):
    # Test the printname method of the Student class
    student = Student(fname, lname, year)
    assert student.printname() == expected

def test_student_graduationyear_type():
    # Test that a TypeError is raised when the graduation year is not an integer
    with pytest.raises(TypeError):
        Student("Mike", "Olsen", "2019")
```