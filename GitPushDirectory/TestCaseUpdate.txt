```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

@pytest.mark.parametrize("test_input,expected_output", [
    (5, 120),  # testing with positive integer
    (3, 6),  # testing with positive integer
    (1, 1),  # testing with edge case: small number
    (0, 1),  # testing with edge case: small number
    (10, 3628800),  # testing with larger number
])
def test_factorial(test_input, expected_output):
    assert factorial(test_input) == expected_output

@pytest.mark.parametrize("test_input", [
    -5,  # testing with negative number
    2.5,  # testing with non-integer number
    '5',  # testing with non-integer number
])
def test_factorial_exceptions(test_input):
    with pytest.raises((RecursionError, TypeError)):  # expecting either RecursionError or TypeError
        factorial(test_input)
```
In the above code, we have two test functions. The first one, `test_factorial`, is testing the `factorial` function with valid inputs and checking if the output is as expected. The second one, `test_factorial_exceptions`, is testing the `factorial` function with invalid inputs and checking if it raises the expected exceptions.