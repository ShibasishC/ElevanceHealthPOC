```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator
@pytest.mark.parametrize("test_input, expected_output", [
    (1, 1),  # factorial of 1 is 1
    (5, 120),  # factorial of 5 is 120
    (10, 3628800),  # factorial of 10 is 3628800
    (0, 1),  # factorial of 0 is 1
])
def test_factorial(test_input, expected_output):
    assert factorial(test_input) == expected_output

# test for negative numbers
def test_factorial_negative():
    with pytest.raises(RecursionError):  # factorial function will cause a RecursionError for negative inputs
        factorial(-1)

# test for non-integer numbers
def test_factorial_non_integer():
    with pytest.raises(RecursionError):  # factorial function will cause a RecursionError for non-integer inputs
        factorial(2.5)

# test for large numbers
def test_factorial_large_number():
    assert factorial(100)  # just check if the function can handle large numbers without causing a stack overflow

# test for non-numeric inputs
def test_factorial_non_numeric():
    with pytest.raises(TypeError):  # factorial function will cause a TypeError for non-numeric inputs
        factorial("a")
```
