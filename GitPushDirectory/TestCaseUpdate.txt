```python
# imports
import pytest  # used for our unit tests

# function to test
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
        return self.firstname + " " + self.lastname

class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year

# unit tests
@pytest.mark.parametrize("fname, lname, expected", [
    ("John", "Doe", "John Doe"),  # Test with valid first name and last name
    (123, "Doe", TypeError),  # Test with non-string first name
    ("John", 456, TypeError),  # Test with non-string last name
    ("", "Doe", ValueError),  # Test with empty first name
    ("John", "", ValueError),  # Test with empty last name
])
def test_person(fname, lname, expected):
    if isinstance(expected, type) and issubclass(expected, Exception):
        with pytest.raises(expected):
            Person(fname, lname)
    else:
        person = Person(fname, lname)
        assert person.printname() == expected

@pytest.mark.parametrize("fname, lname, year, expected", [
    ("Jane", "Doe", 2023, "Jane Doe"),  # Test with valid first name, last name, and graduation year
    (123, "Doe", 2023, TypeError),  # Test with non-string first name
    ("Jane", 456, 2023, TypeError),  # Test with non-string last name
    ("Jane", "Doe", "Twenty-Twenty-Three", TypeError),  # Test with non-integer graduation year
    ("Jane", "Doe", 2000, ValueError),  # Test with graduation year in the past
    ("Jane", "Doe", 3000, ValueError),  # Test with graduation year in the far future
    ("", "Doe", 2023, ValueError),  # Test with empty first name
    ("Jane", "", 2023, ValueError),  # Test with empty last name
    ("Jane", "Doe", "", TypeError),  # Test with empty graduation year
])
def test_student(fname, lname, year, expected):
    if isinstance(expected, type) and issubclass(expected, Exception):
        with pytest.raises(expected):
            Student(fname, lname, year)
    else:
        student = Student(fname, lname, year)
        assert student.printname() == expected
        assert student.graduationyear == year
```