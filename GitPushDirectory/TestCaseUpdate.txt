```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test positive integers
@pytest.mark.parametrize("test_input, expected_output", [(1, 1), (5, 120), (10, 3628800)])
def test_factorial_positive_integers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test zero as input
def test_factorial_zero():
    assert factorial(0) == 1

# Test negative integers
def test_factorial_negative_integers():
    with pytest.raises(RecursionError):
        factorial(-5)

# Test non-integer inputs
@pytest.mark.parametrize("test_input", [5.5, "5"])
def test_factorial_non_integer_inputs(test_input):
    with pytest.raises((RecursionError, TypeError)):
        factorial(test_input)

# Test large numbers as input
def test_factorial_large_numbers():
    assert isinstance(factorial(100), int)
```
In this code, we use the `pytest.mark.parametrize` decorator to test multiple inputs and expected outputs for the `factorial` function. We also use the `pytest.raises` context manager to check that the function raises the expected exceptions for invalid inputs. The `isinstance` function is used to check that the output for large numbers is an integer, as expected.