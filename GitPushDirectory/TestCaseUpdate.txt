```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test the function's behavior for a wide range of possible inputs
@pytest.mark.parametrize("test_input, expected_output", [(5, 120), (3, 6)])
def test_factorial_positive_integers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test edge cases that the author may not have foreseen
@pytest.mark.parametrize("test_input, expected_output", [(1, 1), (0, 1)])
def test_factorial_edge_cases(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test the function's behavior with large numbers
def test_factorial_large_numbers():
    assert factorial(100)  # Just check if it doesn't crash

# Test the function's behavior with negative numbers
def test_factorial_negative_numbers():
    with pytest.raises(RecursionError):
        factorial(-5)

# Test the function's behavior with non-integer inputs
@pytest.mark.parametrize("test_input", [5.5, "five"])
def test_factorial_non_integer_inputs(test_input):
    with pytest.raises(TypeError):
        factorial(test_input)
```