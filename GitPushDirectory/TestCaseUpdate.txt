```python
# imports
import pytest  # used for our unit tests

# function to test
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
        return self.firstname + " " + self.lastname

class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test Person class
@pytest.mark.parametrize("fname, lname, expected", [
    ("John", "Doe", "John Doe"),  # Valid names
    ("", "Doe", " Doe"),  # Empty first name
    ("John", "", "John "),  # Empty last name
    ("John123", "Doe", "John123 Doe"),  # First name with numbers
    ("John", "Doe@", "John Doe@")  # Last name with special characters
])
def test_person(fname, lname, expected):
    person = Person(fname, lname)
    assert person.printname() == expected

# Test Student class
@pytest.mark.parametrize("fname, lname, year, expected", [
    ("Mike", "Olsen", 2019, "Mike Olsen"),  # Valid names and year
    ("Mike", "", 2019, "Mike "),  # Empty last name
    ("Mike", "Olsen@", 2019, "Mike Olsen@"),  # Last name with special characters
    ("Mike123", "Olsen", 2019, "Mike123 Olsen"),  # First name with numbers
])
def test_student(fname, lname, year, expected):
    student = Student(fname, lname, year)
    assert student.printname() == expected

# Test Student class graduation year
@pytest.mark.parametrize("fname, lname, year", [
    ("Mike", "Olsen", 2019),  # Valid year
    ("Mike", "Olsen", 3022),  # Year too far in the future
    ("Mike", "Olsen", -2020),  # Negative year
])
def test_student_year(fname, lname, year):
    student = Student(fname, lname, year)
    assert student.graduationyear == year
```