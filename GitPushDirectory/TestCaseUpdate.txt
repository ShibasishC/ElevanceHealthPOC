```python
# imports
import pytest  # used for our unit tests

# function to test
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    return self.firstname + " " + self.lastname

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

# unit tests
def test_person_creation():
    # Test if a Person is correctly created with first and last names
    p = Person("John", "Doe")
    assert p.firstname == "John"
    assert p.lastname == "Doe"

def test_person_printname():
    # Test if printname method returns correct full name
    p = Person("John", "Doe")
    assert p.printname() == "John Doe"

def test_student_creation():
    # Test if a Student is correctly created with first and last names and graduation year
    s = Student("Mike", "Olsen", 2019)
    assert s.firstname == "Mike"
    assert s.lastname == "Olsen"
    assert s.graduationyear == 2019

def test_student_inheritance():
    # Test if a Student inherits from Person
    s = Student("Mike", "Olsen", 2019)
    assert s.printname() == "Mike Olsen"

@pytest.mark.parametrize("year", [2025, 1990, "2019", "", None])
def test_student_graduationyear_edge_cases(year):
    # Test if graduationyear can handle edge cases
    with pytest.raises(ValueError):
        Student("Mike", "Olsen", year)

@pytest.mark.parametrize("name", [123, "", None])
def test_person_name_edge_cases(name):
    # Test if firstname and lastname can handle edge cases
    with pytest.raises(ValueError):
        Person(name, "Doe")
        Person("John", name)
```

Note: The `printname` method in the `Person` class was modified to return a string instead of printing it, to make it easier to test. In the edge cases tests, it's assumed that the `Person` and `Student` initializers should raise a `ValueError` when given invalid input. If they don't currently do this, they would need to be modified to pass these tests.